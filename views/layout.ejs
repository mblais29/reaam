<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'Asset Management' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap/css/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/bootstrap/css/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/footable/footable.bootstrap.css">
    <link rel="stylesheet" href="/styles/footable/footable.bootstrap.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/leaflet/leaflet.css">
    <link rel="stylesheet" href="/styles/leaflet/leaflet.groupedlayercontrol.css">
    <!--STYLES END-->
  </head>

  <body>
  <% if(session.authenticated) { %>
	  <div id="wrapper">
        <!-- Sidebar -->
        <div id="sidebar-wrapper">
            <ul class="sidebar-nav">
            	
                <li class="sidebar-brand">
                    <a class="navbar-brand" href="#">Asset Management</a>
                </li>
                <li>
                	<a href="/user/show/<%= req.session.User.id %>"><%= req.session.User.firstname %> <%= req.session.User.lastname %></a>
                </li>
                <li>
                    <a href="/map">Map</a>
                </li>
  			<% if(session.User.admin) { %>
                <li>
                    <a href="/user">Users</a>
                </li>
  			<% } %>
                <div class="navbar-left" style="margin-right: 15px">
		  			<a class="btn btn-default navbar-btn btn-right" href="/session/destroy">Sign-out</a>
		  		</div>
            </ul>
        </div>
        
        <!-- /#sidebar-wrapper -->

        <!-- Page Content -->
        <div id="page-content-wrapper">
            <div class="container-fluid">
  <% } %>
                        <%- body %>
                        
  <% if(session.authenticated) { %>
            </div>
        </div>
        <!-- /#page-content-wrapper -->
    </div>
    <!-- /#wrapper -->
  <% } %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/jquery.validate.min.js"></script>
    <script src="/js/dependencies/leaflet/leaflet-src.js"></script>
    <script src="/js/dependencies/leaflet/leaflet.js"></script>
    <script src="/js/bootstrap/bootstrap.min.js"></script>
    <script src="/js/dependencies/leaflet/Google.js"></script>
    <script src="/js/dependencies/leaflet/leaflet-google.js"></script>
    <script src="/js/dependencies/leaflet/leaflet.groupedlayercontrol.js"></script>
    <script src="/js/footable/footable.js"></script>
    <script src="/js/footable/footable.min.js"></script>
    <script src="/js/global/map/map.js"></script>
    <script src="/js/global/nav/nav.js"></script>
    <script src="/js/global/signupValidate/signupValidate.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
